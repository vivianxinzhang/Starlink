[{"/Users/wx6698/Desktop/Starlink/starlink/src/index.js":"1","/Users/wx6698/Desktop/Starlink/starlink/src/reportWebVitals.js":"2","/Users/wx6698/Desktop/Starlink/starlink/src/components/App.js":"3","/Users/wx6698/Desktop/Starlink/starlink/src/components/Header.js":"4","/Users/wx6698/Desktop/Starlink/starlink/src/components/Footer.js":"5","/Users/wx6698/Desktop/Starlink/starlink/src/components/Main.js":"6","/Users/wx6698/Desktop/Starlink/starlink/src/components/SatSetting.js":"7","/Users/wx6698/Desktop/Starlink/starlink/src/components/SatelliteList.js":"8","/Users/wx6698/Desktop/Starlink/starlink/src/constants.js":"9","/Users/wx6698/Desktop/Starlink/starlink/src/components/WorldMap.js":"10"},{"size":757,"mtime":1612105749688,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1611274703356,"results":"13","hashOfConfig":"12"},{"size":260,"mtime":1612105749676,"results":"14","hashOfConfig":"12"},{"size":568,"mtime":1611281789869,"results":"15","hashOfConfig":"12"},{"size":342,"mtime":1611296754978,"results":"16","hashOfConfig":"12"},{"size":2845,"mtime":1612648606622,"results":"17","hashOfConfig":"12"},{"size":4740,"mtime":1612105749687,"results":"18","hashOfConfig":"12"},{"size":3547,"mtime":1612308932808,"results":"19","hashOfConfig":"12"},{"size":306,"mtime":1612643207487,"results":"20","hashOfConfig":"12"},{"size":6402,"mtime":1612648434358,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"z0ij0r",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},"/Users/wx6698/Desktop/Starlink/starlink/src/index.js",[],["45","46"],"/Users/wx6698/Desktop/Starlink/starlink/src/reportWebVitals.js",[],"/Users/wx6698/Desktop/Starlink/starlink/src/components/App.js",[],"/Users/wx6698/Desktop/Starlink/starlink/src/components/Header.js",[],"/Users/wx6698/Desktop/Starlink/starlink/src/components/Footer.js",[],"/Users/wx6698/Desktop/Starlink/starlink/src/components/Main.js",[],"/Users/wx6698/Desktop/Starlink/starlink/src/components/SatSetting.js",[],"/Users/wx6698/Desktop/Starlink/starlink/src/components/SatelliteList.js",["47","48"],"import React, {Component} from 'react';\nimport { List, Avatar, Button, Checkbox, Spin } from 'antd';\nimport satelliteIcon from \"../assets/images/logo.svg\";\nimport {select} from \"d3-selection\";\n\nclass SatelliteList extends Component {\n    constructor(){\n        super();\n        this.state = {\n            selected: [],\n            isLoad: false\n        };\n    }\n\n    onChange = e => {\n        console.log('clicked -> ', e.target);\n        const { dataInfo, checked } = e.target;\n        // processing the satellite\n        const { selected } = this.state;\n        // add or remove selected satellite to/from the satList\n        const list = this.addOrRemove(dataInfo, checked, selected);\n        this.setState({ selected: list })\n    }\n\n    addOrRemove = (sat, status, list) => {\n        const found = list.some( entry => entry.satid === sat.satid);\n        // case1: check is true\n        // -> sat not in list -> add item\n        // -> sat is in list -> do nothing\n\n        // case2: check is false\n        // -> sat not in list -> do nothing\n        // -> sat is in list -> remove it\n\n        if(status && !found){\n            // list.push(item)\n            list = [...list, sat]\n        }\n\n        if(!status && found){\n            list = list.filter( entry => {\n                return entry.satid !== sat.satid;\n            });\n        }\n        console.log(list);\n        return list;\n    }\n\n    render() {\n        console.log(this.props);\n        const satList = this.props.satInfo ? this.props.satInfo.above : [];\n        const { isLoad } = this.props;\n        const { selected } = this.state;\n        return (\n            <div className=\"sat-list-box\">\n                <br/>\n                <Button\n                    className=\"sat-list-btn\"\n                    type=\"primary\"\n                    // disabled={ selected.length === 0 }\n                >\n                        Track on the map\n                </Button>\n                <hr/>\n                {\n                    isLoad ?\n                        <div className=\"spin-box\">\n                            <Spin tip=\"Loading...\" size=\"large\" />\n                        </div>\n                        :\n                        <List\n                            className=\"sat-list\"\n                            itemLayout=\"horizontal\"\n                            size=\"small\"\n                            dataSource={satList}\n                            renderItem={item => (\n                                <List.Item\n                                    actions={[<Checkbox dataInfo={item} onChange={this.onChange}/>]}\n                                >\n                                    <List.Item.Meta\n                                        avatar={<Avatar size={50} src={satelliteIcon} />}\n                                        title={<p>{item.satname}</p>}\n                                        description={`Launch Date: ${item.launchDate}`}\n                                    />\n                                </List.Item>\n                            )}\n//                             renderItem={item => {\n//                                   //console.log(item);\n//                                   return (\n//                                         <List.Item>\n//                                               haha\n//                                         </List.Item>\n//                                   )\n//                             }}\n                        />\n                }\n            </div>\n        );\n    }\n}\n\nexport default SatelliteList;","/Users/wx6698/Desktop/Starlink/starlink/src/constants.js",[],"/Users/wx6698/Desktop/Starlink/starlink/src/components/WorldMap.js",["49","50","51","52"],"import React, {Component} from 'react';\nimport axios from 'axios';\nimport {Spin} from \"antd\";\nimport {feature} from 'topojson-client';\nimport {geoKavrayskiy7} from 'd3-geo-projection';\nimport {geoGraticule, geoPath} from 'd3-geo';\nimport {select as d3Select} from 'd3-selection';\nimport {schemeCategory10} from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport {timeFormat as d3TimeFormat} from \"d3-time-format\";\n\nimport {\n    WORLD_MAP_URL,\n    SATELLITE_POSITION_URL,\n    SAT_API_KEY\n} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isLoading: false,\n            isDrawing: false\n        };\n        this.map = null;\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\n        this.refMap = React.createRef();\n        this.refTrack = React.createRef();\n    }\n\n    componentDidMount() {\n        axios\n            .get(WORLD_MAP_URL)\n            .then(response => {\n                console.log(response);\n                const {data} = response;\n                const land = feature(data, data.objects.countries).features;\n                console.log(land);\n                this.generateMap(land);\n            })\n            .catch(e => console.log('err in fetch world map data ', e));\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.satData != this.props.satData) {\n            const {\n                latitude,\n                longitude,\n                elevation,\n                altitude,\n                duration\n            } = this.props.observerData;\n            const endTime = duration * 60;\n\n            this.setState({\n                isLoading: true\n            });\n\n            const urls = this.props.satData.map(sat => {\n                const {satid} = sat;\n                const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n                return axios.get(url);\n            });\n\n            Promise.all(urls)\n                .then(res => {\n                    const arr = res.map(sat => sat.data);\n                    this.setState({\n                        isLoading: false,\n                        isDrawing: true\n                    });\n                    if (!prevState.isDrawing) {\n                        this.track(arr);\n                    } else {\n                        const oHint = document.getElementsByClassName(\"hint\")[0];\n                        oHint.innerHTML = \"Please wait for these satellite animation to finish before selection new ones!\";\n                    }\n                })\n                .catch(e => {\n                    console.log(\"err in fetch satellite position -> \", e.message);\n                });\n        }\n    }\n\n    track = data => {\n        if (!data[0].hasOwnProperty(\"position\")) {\n            throw new Error(\"no position data\");\n            return;\n        }\n\n        const len = data[0].positions.length;\n        const {duration} = this.props.observerData;\n        const {context2} = this.map;\n\n        let now = new Date();\n\n        let i = 0;\n        let timer = setInterval(() => {\n            let ct = new Date();\n\n            let timePassed = i === 0 ? 0 : ct - now;\n            let time = new Date(now.getTime() + 60 * timePassed);\n\n            context2.clearRect(0, 0, width, height);\n\n            context2.font = \"bold 14px sans-serif\";\n            context2.fillStyle = \"#333\";\n            context2.textAlign = \"center\";\n            context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n            if (i >= len) {\n                clearInterval(timer);\n                this.setState({ isDrawing: false });\n                const oHint = document.getElementsByClassName(\"hint\")[0];\n                oHint.innerHTML = \"\";\n                return;\n            }\n\n            data.forEach(sat => {\n                const { info, positions } = sat;\n                this.drawSat(info, positions[i]);\n            });\n\n            i += 60;\n        }, 1000);\n    };\n\n    drawSat = (sat, pos) => {\n        const { satlongitude, satlatitude } = pos;\n\n        if (!satlatitude || !satlongitude) return;\n\n        const { satname } = sat;\n        const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n\n        const { projection, context2 } = this.map;\n        const xy = projection([satlongitude, satlatitude]);\n\n        context2.fillStyle = this.color(nameWithNumber);\n        context2.beginPath();\n        context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n        context2.fill();\n\n        context2.font = \"bold 11px sans-serif\";\n        context2.textAlign = \"center\";\n        context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n    }\n\n    render() {\n\n        const { isLoading } = this.state;\n        return (\n            <div className=\"map-box\">\n                {isLoading ? (\n                    <div className=\"spinner\">\n                        <Spin tip=\"Loading...\" size=\"large\" />\n                    </div>\n                ) : null}\n                <canvas className=\"map\" ref={this.refMap} />\n                <canvas className=\"track\" ref={this.refTrack} />\n                <div className=\"hint\" />\n            </div>\n        );\n    }\n\n    generateMap(land) {\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(.1);\n\n        const graticule = geoGraticule();\n\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        let context = canvas.node().getContext(\"2d\");\n\n        let path = geoPath()\n            .projection(projection)\n            .context(context);\n\n        land.forEach(ele => {\n            context.fillStyle = '#B3DDEF';\n            context.strokeStyle = '#000';\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n        })\n    }\n}\n\nexport default WorldMap;",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":4,"column":9,"nodeType":"59","messageId":"60","endLine":4,"endColumn":15},{"ruleId":"57","severity":1,"message":"61","line":53,"column":17,"nodeType":"59","messageId":"60","endLine":53,"endColumn":25},{"ruleId":"62","severity":1,"message":"63","line":48,"column":31,"nodeType":"64","messageId":"65","endLine":48,"endColumn":33},{"ruleId":"57","severity":1,"message":"66","line":53,"column":17,"nodeType":"59","messageId":"60","endLine":53,"endColumn":25},{"ruleId":"67","severity":1,"message":"68","line":91,"column":13,"nodeType":"69","messageId":"70","endLine":91,"endColumn":20},{"ruleId":"57","severity":1,"message":"71","line":95,"column":16,"nodeType":"59","messageId":"60","endLine":95,"endColumn":24},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'select' is defined but never used.","Identifier","unusedVar","'selected' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'altitude' is assigned a value but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'duration' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]